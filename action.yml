name: Love actions for macOS portable
description: macOS portable CI/CD for LÖVE based games
branding:
  icon: "heart"
  color: "purple"
inputs:
  app-name:
    description: |
      App display name
      Would be used in platform/xcode/macosx/love-macosx.plist
    required: false
    default: "LÖVE for macOS"
  bundle-id:
    description: |
      App bundle id
      Would be used in platform/xcode/love.xcodeproj/project.pbxproj
    required: false
    default: "org.love2d.macOS"
  copyright:
    description: |
      App copyright info
      Would be used in platform/xcode/macosx/love-macosx.plist
    required: false
  icon-path:
    description: |
      Icon path
      Should be .icns format
      Would be used in platform/xcode/Images.xcassets/OS X AppIcon.appiconset
    required: true
    default: "./icon.icns"
  love-package:
    description: |
      Love package
      Would be used to assemble the executable
    required: false
    default: "./game.love"
  product-name:
    description: |
      Base name of the package
      Would be used to rename products
    required: false
    default: "love_app"
  version-string:
    description: |
      App version string
      Use 3 numbers seperated by dots
      Looks like 3.2.1
    required: false
    default: "11.4"
  output-folder:
    description: |
      Packages output folder
      All packages would be placed here
    required: false
    default: "./build"
  account-username:
    description: |
      Account username
      Would be used to sign the .app
    required: true
  account-password:
    description: |
      Account password
      Would be used to sign the .app
    required: true
  developer-id-application-base64:
    description: |
      Developer ID Application certificate base64 content
      Would be used to sign the .app
    required: true
  developer-id-application-password:
    description: |
      Developer ID Application certificate password
      Would be used to sign the .app
    required: true
  team-id:
    description: |
      Developer team id
      Would be used to sign the .app
    required: true
  developer-id-installer-base64:
    description: |
      Developer ID Installer certificate base64 content
      Would be used to sign the .pkg
    required: false
  developer-id-installer-password:
    description: |
      Developer ID Installer certificate password
      Would be used to sign the .pkg
    required: false
  dmg-background-path:
    description: |
      DMG background path
      Should be .png format
      Would be used to create .dmg
    required: false
    default: "./background.png"
  dmg-icon-position:
    description: |
      DMG icon position
      Would be used to create .dmg
    required: false
    default: "top-left"
  dmg-icon-size:
    description: |
      DMG icon size
      Would be used to create .dmg
    required: false
    default: "128"
  dmg-link-position:
    description: |
      DMG drop link position
      Would be used to create .dmg
    required: false
    default: "bottom-left"
  dmg-text-size:
    description: |
      DMG text size
      Would be used to create .dmg
    required: false
    default: "12"
  dmg-volume-icon-path:
    description: |
      DMG volume icon path
      Should be .icns format
      Would be used to create .dmg
    required: false
    default: "./icon.icns"
  dmg-volume-name:
    description: |
      DMG volume name
      Would be used to create .dmg
    required: false
    default: "LÖVE for macOS"
  dmg-window-position:
    description: |
      DMG window position
      Would be used to create .dmg
    required: false
    default: "top-left"
  dmg-window-size:
    description: |
      DMG window size
      Would be used to create .dmg
    required: false
    default: "512"
outputs:
  package-paths:
    description: |
      Paths to the built packages in a bash list
      Would be paths relative to repository root, separated by spaces
      Looks like: ./build/game.apk ./build/game.abb
    value: ${{ steps.gather-packages.outputs.package-paths }}
runs:
  using: "composite"
  steps:
    - name: Create directories
      shell: bash
      run: |
        mkdir -p ${{ runner.temp }}/macOS/
        mkdir -p ${{ inputs.output-folder }}
    - name: Checkout love
      uses: actions/checkout@v3
      with:
        path: ${{ runner.temp }}/macOS/love
        ref: c35356c841976eb6f370347b81eec845d5520338
        repository: love2d/love
    - name: Checkout framework SDK
      uses: actions/checkout@v3
      with:
        path: ${{ runner.temp }}/macOS/love-apple-dependencies
        ref: 402eed62c2bd654a860bb64544393285fb640497
        repository: love2d/love-apple-dependencies
    - name: Move framework SDK and love package
      shell: bash
      run: |
        mv ${{ runner.temp }}/macOS/love-apple-dependencies/macOS/Frameworks/ ${{ runner.temp }}/macOS/love/platform/xcode/macosx
        mv ${{ runner.temp }}/macOS/love-apple-dependencies/iOS/libraries/ ${{ runner.temp }}/macOS/love/platform/xcode/ios
        mv ${{ inputs.love-package }} ${{ runner.temp }}/macOS/love/platform/xcode/game.love
        mkdir -p ${{ runner.temp }}/macOS/love/platform/xcode/build/Debug
        mkdir -p ${{ runner.temp }}/macOS/love/platform/xcode/build/Release
    - name: Process icons
      shell: bash
      run: |
        rm -rf ${{ runner.temp }}/macOS/love/platform/xcode/Images.xcassets/OS\ X\ AppIcon.appiconset/*.png
        iconutil -c iconset -o ${{ runner.temp }}/macOS/icon.iconset ${{ inputs.icon-path }}
        mv -f ${{ runner.temp }}/macOS/icon.iconset/* ${{ runner.temp }}/macOS/love/platform/xcode/Images.xcassets/OS\ X\ AppIcon.appiconset/
    - name: Create keychain and import Developer ID Application certificate
      env:
        CERTIFICATE_PATH: ${{ runner.temp }}/macOS/cert_app.p12
        KEYCHAIN_PATH: ${{ runner.temp }}/macOS/build.keychain
        KEYCHAIN_PASSWORD: build_keychain_password
      shell: bash
      run: |
        echo -n "${{ inputs.developer-id-application-base64 }}" | base64 --decode --output $CERTIFICATE_PATH
        security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security default-keychain -s $KEYCHAIN_PATH
        security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
        security import $CERTIFICATE_PATH -A -f pkcs12 -k $KEYCHAIN_PATH -P "${{ inputs.developer-id-application-password }}" -t cert
        security set-key-partition-list -S apple-tool:,apple:,codesign:,productbuild:,productsign: -s -k $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
    - name: Import Developer ID Installer certificate
      if: "${{ inputs.developer-id-installer-base64 != '' && inputs.developer-id-installer-password != '' }}"
      env:
        CERTIFICATE_PATH: ${{ runner.temp }}/macOS/cert_inst.p12
        KEYCHAIN_PATH: ${{ runner.temp }}/macOS/build.keychain
        KEYCHAIN_PASSWORD: build_keychain_password
      shell: bash
      run: |
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security default-keychain -s $KEYCHAIN_PATH
        security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
        echo -n "${{ inputs.developer-id-installer-base64 }}" | base64 --decode --output $CERTIFICATE_PATH
        security import $CERTIFICATE_PATH -A -f pkcs12 -k $KEYCHAIN_PATH -P "${{ inputs.developer-id-installer-password }}" -t cert
        security set-key-partition-list -S apple-tool:,apple:,codesign:,productbuild:,productsign: -s -k $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
    - name: Modify XCode project
      shell: bash
      run: |
        npm i plist xcode

        cat <<EOT >> temp.js
        const fs = require('fs');
        const plist = require('plist');
        const xcode = require('xcode');

        const configuration = 'Release'

        const liblovePbxprojPath = '${{ runner.temp }}/macOS/love/platform/xcode/liblove.xcodeproj/project.pbxproj';
        const libloveProject = xcode.project(liblovePbxprojPath).parseSync();
        const libloveTarget = 'liblove-macosx'
        libloveProject.updateBuildProperty('MACOSX_DEPLOYMENT_TARGET', '10.9', configuration, libloveTarget);
        fs.writeFileSync(liblovePbxprojPath, libloveProject.writeSync());

        const lovePbxprojPath = '${{ runner.temp }}/macOS/love/platform/xcode/love.xcodeproj/project.pbxproj';
        const loveProject = xcode.project(lovePbxprojPath).parseSync();
        const loveTarget = 'love-macosx'
        loveProject.updateBuildProperty('CODE_SIGN_IDENTITY', '"Developer ID Application"', configuration, loveTarget);
        loveProject.updateBuildProperty('DEVELOPMENT_TEAM', '${{ inputs.team-id }}', configuration, loveTarget);
        loveProject.updateBuildProperty('MACOSX_DEPLOYMENT_TARGET', '10.9', configuration, loveTarget);
        loveProject.updateBuildProperty('MARKETING_VERSION', '${{ inputs.version-string }}', configuration, loveTarget);
        loveProject.updateBuildProperty('PRODUCT_BUNDLE_IDENTIFIER', '${{ inputs.bundle-id }}', configuration, loveTarget);
        loveProject.updateBuildProperty('PRODUCT_NAME', '${{ inputs.product-name }}', configuration, loveTarget);
        loveProject.addResourceFile(
            './game.love',
            {target: loveProject.findTargetKey('"love-macosx"')},
            loveProject.findPBXGroupKey({name: 'Resources'})
        );
        fs.writeFileSync(lovePbxprojPath, loveProject.writeSync());

        const plistPath = '${{ runner.temp }}/macOS/love/platform/xcode/macosx/love-macosx.plist';
        const parsed = plist['parse'](fs.readFileSync(plistPath, 'utf8'));
        parsed['CFBundleExecutable'] = '${{ inputs.product-name }}';
        parsed['CFBundleName'] = '${{ inputs.app-name }}';
        parsed['NSHumanReadableCopyright'] = '$ {{ inputs.copyright }}';
        delete parsed['CFBundleDocumentTypes'];
        delete parsed['UTExportedTypeDeclarations'];
        fs.writeFileSync(plistPath, plist['build'](parsed));

        const exportPlistPath = '${{ runner.temp }}/macOS/love/platform/xcode/macosx/macos-copy-app.plist';
        const exportPlist = plist['parse'](fs.readFileSync(exportPlistPath, 'utf8'));
        exportPlist['method'] = 'developer-id';
        exportPlist['teamID'] = '${{ inputs.team-id }}';
        fs.writeFileSync(exportPlistPath, plist['build'](exportPlist));

        const iconPath = '${{ runner.temp }}/macOS/love/platform/xcode/Images.xcassets/OS X AppIcon.appiconset/Contents.json';
        const iconContents = JSON.parse(fs.readFileSync(iconPath, 'utf8'));
        iconContents.images.forEach(image => {
            image.filename = 'icon_' + image.size + (image.scale === '2x' ? '@2x' : '') + '.png';
        });
        fs.writeFileSync(iconPath, JSON.stringify(iconContents));

        console.info('Project info updated.');
        EOT

        node temp.js
    - name: Build MacOS app
      env:
        ARCHIVE_PATH: ${{ runner.temp }}/macOS/archive.xcarchive
        KEYCHAIN_PATH: ${{ runner.temp }}/macOS/build.keychain
        KEYCHAIN_PASSWORD: build_keychain_password
      shell: bash
      run: |
        security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH

        xcodebuild clean archive -quiet \
        -project ${{ runner.temp }}/macOS/love/platform/xcode/love.xcodeproj \
        -scheme love-macosx \
        -configuration Release \
        -archivePath ${{ env.ARCHIVE_PATH }} \
        OTHER_CFLAGS="-Wno-unused-parameter -Wno-sign-compare -Wno-conditional-uninitialized -Wno-strict-prototypes"

        xcodebuild -exportArchive \
        -archivePath ${{ env.ARCHIVE_PATH }} \
        -exportPath ${{ runner.temp }}/macOS/ \
        -exportOptionsPlist ${{ runner.temp }}/macOS/love/platform/xcode/macosx/macos-copy-app.plist
    - name: Make app zip
      shell: bash
      run: |
        ditto -c -k --sequesterRsrc --keepParent ${{ runner.temp }}/macOS/${{ inputs.product-name }}.app ${{ runner.temp }}/macOS/${{ inputs.product-name }}.zip
    - name: Notarize application bundle
      uses: cocoalibs/xcode-notarization-action@v1
      with:
        app-path: "${{ runner.temp }}/macOS/${{ inputs.product-name }}.zip"
        apple-id: "${{ inputs.account-username }}"
        password: "${{ inputs.account-password }}"
        team-id: "${{ inputs.team-id }}"
    - name: Create pkg file
      if: "${{ inputs.developer-id-installer-base64 != '' && inputs.developer-id-installer-password != '' }}"
      env:
        KEYCHAIN_PATH: ${{ runner.temp }}/macOS/build.keychain
        KEYCHAIN_PASSWORD: build_keychain_password
      shell: bash
      run: |
        security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
        identity=$(security find-identity -v | grep -o 'Developer ID Installer[^"]*')
        productbuild --component ${{ runner.temp }}/macOS/${{ inputs.product-name }}.app /Applications ${{ runner.temp }}/macOS/${{ inputs.product-name }}_unsigned.pkg
        productsign --sign "$identity" ${{ runner.temp }}/macOS/${{ inputs.product-name }}_unsigned.pkg ${{ runner.temp }}/macOS/${{ inputs.product-name }}.pkg
    - name: Notarize installer pkg
      if: "${{ inputs.developer-id-installer-base64 != '' && inputs.developer-id-installer-password != '' }}"
      uses: cocoalibs/xcode-notarization-action@v1
      with:
        app-path: "${{ runner.temp }}/macOS/${{ inputs.product-name }}.pkg"
        apple-id: "${{ inputs.account-username }}"
        password: "${{ inputs.account-password }}"
        team-id: "${{ inputs.team-id }}"
    - name: Move installer pkg
      if: "${{ inputs.developer-id-installer-base64 != '' && inputs.developer-id-installer-password != '' }}"
      shell: bash
      run: |
        mv ${{ runner.temp }}/macOS/${{ inputs.product-name }}.pkg ${{ inputs.output-folder }}/${{ inputs.product-name }}.pkg
    - name: Create dmg file
      if: "${{ inputs.dmg-background-path != '' && inputs.dmg-icon-position != '' && inputs.dmg-icon-size != '' && inputs.dmg-link-position != '' && inputs.dmg-text-size != '' && inputs.dmg-volume-icon-path != '' && inputs.dmg-volume-name != '' && inputs.dmg-window-position != '' && inputs.dmg-window-size != '' }}"
      shell: bash
      run: |
        brew install create-dmg
        create-dmg \
        --app-drop-link ${{ inputs.dmg-link-position }} \
        --background "${{ inputs.dmg-background-path }}" \
        --hide-extension "${{ inputs.product-name }}.app" \
        --icon "${{ inputs.product-name }}.app" ${{ inputs.dmg-icon-position }} \
        --icon-size ${{ inputs.dmg-icon-size }} \
        --text-size ${{ inputs.dmg-text-size }} \
        --volicon "${{ inputs.dmg-volume-icon-path }}" \
        --volname "${{ inputs.dmg-volume-name }}" \
        --window-pos ${{ inputs.dmg-window-position }} \
        --window-size ${{ inputs.dmg-window-size }} \
        "${{ inputs.output-folder }}/${{ inputs.product-name }}.dmg" \
        "${{ runner.temp }}/macOS/${{ inputs.product-name }}.app"
    - name: Gather packages in output folder
      id: gather-packages
      shell: bash
      run: |
        ditto -c -k --sequesterRsrc --keepParent ${{ runner.temp }}/macOS/${{ inputs.product-name }}.app ${{ inputs.output-folder }}/${{ inputs.product-name }}.zip
        echo ::set-output name=package-paths::$(ls -d ${{ inputs.output-folder }}/*)
    - name: Cleanup
      shell: bash
      run: |
        rm -rf ${{ runner.temp }}/macOS/
